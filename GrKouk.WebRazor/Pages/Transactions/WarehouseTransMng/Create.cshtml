@page
@model GrKouk.WebRazor.Pages.Transactions.WarehouseTransMng.CreateModel
@using Microsoft.Extensions.Configuration
@inject IConfiguration Configuration

@{
    ViewData["Title"] = "Create";
}
<style>
    .material-loading {
        background: white url('@Url.Content("~/images/ui-anim_basic_16x16.gif")') right center no-repeat;
    }

</style>
<h2>Create</h2>

<h4>WarehouseTransaction</h4>
<hr />
<div class="container">

    <form method="post">

        <div asp-validation-summary="ModelOnly" class="text-danger small"></div>
        <input type="hidden" asp-for="ItemVm.PrimaryUnitId" />
        <input type="hidden" asp-for="ItemVm.SecondaryUnitId" />
        <input type="hidden" asp-for="ItemVm.UnitFactor" />
        <input type="hidden" asp-for="@Model.InitialLoad" id="IsInitialLoad" />
        @* <input type="hidden" asp-for="ItemVm.TransWarehouseDocTypeId" />*@
        <div class="form-row">
            <div class="form-group col-md-3">
                <label asp-for="ItemVm.TransDate" class="small"></label>
                <input asp-for="ItemVm.TransDate" class="form-control form-control-sm small" autofocus />
                <span asp-validation-for="ItemVm.TransDate" class="text-danger small"></span>
            </div>
            <div class="form-group col-md-6">
                <label asp-for="ItemVm.TransWarehouseDocSeriesId" class="small"></label>
                <div class="input-group ">
                    <select asp-for="ItemVm.TransWarehouseDocSeriesId" class="form-control form-control-sm small" asp-items="ViewBag.TransWarehouseDocSeriesId"></select>
                    <div class="input-group-append">
                        <span class="form-control-sm small" id="seriesLoading" hidden><i class="fas fa-spinner fa-spin"></i></span>
                    </div>
                </div>
            </div>

            <div class="form-group col-md-3">
                <label asp-for="ItemVm.TransRefCode" class="small"></label>
                <input asp-for="ItemVm.TransRefCode" class="form-control form-control-sm small" />
                <span asp-validation-for="ItemVm.TransRefCode" class="text-danger small"></span>
            </div>

        </div>
        <div class="form-row">
            <div class="form-group col-md-6">
                <label asp-for="ItemVm.WarehouseItemId" class="small " id="materialLabel"></label>
                <div class="input-group ">
                    <select asp-for="ItemVm.WarehouseItemId" class="form-control form-control-sm small " asp-items="ViewBag.MaterialId"></select>
                    <div class="input-group-append">
                        <span class="form-control-sm small" id="matLoading" hidden><i class="fas fa-spinner fa-spin"></i></span>
                    </div>
                </div>


            </div>
            <div class="form-group col-md-3">
                <label asp-for="ItemVm.FiscalPeriodId" class="small"></label>
                <select asp-for="ItemVm.FiscalPeriodId" class="form-control form-control-sm small" asp-items="ViewBag.FiscalPeriodId" readonly></select>
                <span asp-validation-for="ItemVm.FiscalPeriodId" class="text-danger small"></span>
            </div>
            <div class="form-group col-md-3">
                <label asp-for="ItemVm.CompanyId" class="small"></label>
                <select asp-for="ItemVm.CompanyId" class="form-control form-control-sm small" asp-items="ViewBag.CompanyId"></select>
            </div>
        </div>
        
        <div class="form-row">
            <div class="form-group  col-md-3">
                <label asp-for="ItemVm.Quontity1" class="small"></label>
                <div class="input-group ">
                    <input asp-for="ItemVm.Quontity1" class="form-control form-control-sm small" />
                    <div class="input-group-append">
                        <span class="input-group-text form-control-sm small" id="primaryUnitCode"></span>
                    </div>
                </div>
                <span asp-validation-for="ItemVm.Quontity1" class="text-danger small"></span>
            </div>
            <div class="form-group col-md-3">
                <label asp-for="ItemVm.Quontity2" class="small"></label>
                <div class="input-group">
                    <input asp-for="ItemVm.Quontity2" class="form-control form-control-sm small" />
                    <div class="input-group-append">
                        <span class="input-group-text form-control-sm small" id="secondaryUnitCode"></span>
                    </div>
                </div>

                <span asp-validation-for="ItemVm.Quontity2" class="text-danger small"></span>
            </div>
            <div class="form-group col-md-2">
                <label asp-for="ItemVm.UnitPrice" class="small"></label>
                <input asp-for="ItemVm.UnitPrice" class="form-control form-control-sm small" />
                <span asp-validation-for="ItemVm.UnitPrice" class="text-danger small"></span>
            </div>

        </div>
        <div class="form-row">
            <div class="form-group col-md-1">
                <label asp-for="ItemVm.FpaRate" class="small"></label>
                <input asp-for="ItemVm.FpaRate" class="form-control form-control-sm small" />
                <span asp-validation-for="ItemVm.FpaRate" class="text-danger small"></span>
            </div>
            <div class="form-group col-md-2">
                <label asp-for="ItemVm.AmountNet" class="small"></label>
                <input asp-for="ItemVm.AmountNet" class="form-control form-control-sm small" readonly />
                <span asp-validation-for="ItemVm.AmountNet" class="text-danger small"></span>
            </div>
            <div class="form-group col-md-2">
                <label asp-for="ItemVm.AmountFpa" class="small"></label>
                <input asp-for="ItemVm.AmountFpa" class="form-control form-control-sm small" readonly />
                <span asp-validation-for="ItemVm.AmountFpa" class="text-danger small"></span>
            </div>
            <div class="form-group col-md-2">
                <label asp-for="ItemVm.AmountDiscount" class="small"></label>
                <input asp-for="ItemVm.AmountDiscount" class="form-control form-control-sm small" />
                <span asp-validation-for="ItemVm.AmountDiscount" class="text-danger small"></span>
            </div>
            <div class="form-group col-md-2">
                <label class="small">Sum</label>
                <input id="SumAmount" class="form-control form-control-sm small" disabled />

            </div>

        </div>
        <div class="form-row">
            <div class="form-group col-md-12">
                <label asp-for="ItemVm.Etiology" class="small"></label>
                <textarea asp-for="ItemVm.Etiology" class="form-control form-control-sm small" placeholder="Αιτιολογία Κίνησης"> </textarea>
                <span asp-validation-for="ItemVm.Etiology" class="text-danger small"></span>
            </div>
        </div>
        <div class="form-row">
            <div class="form-group">
                <input type="submit" value="Create" class="btn btn-primary btn-sm" />
            </div>
        </div>
    </form>
</div>
<div>
    <a asp-page="Index3">Back to List</a>
</div>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
    <script>
        $(document).ready(() => {
            var $initialLoad = $('#IsInitialLoad');
            //#region
            var $material = $('#ItemVm_MaterialId');
            var $unitPrice = $('#ItemVm_UnitPrice');
            var $Q1 = $('#ItemVm_Quontity1');
            var $Q2 = $('#ItemVm_Quontity2');
            var $amountNet = $('#ItemVm_AmountNet');
            var $amountFpa = $('#ItemVm_AmountFpa');
            var $amountDic = $('#ItemVm_AmountDiscount');
            var $transDate = $('#ItemVm_TransDate');
            var $primUnitId = $('#ItemVm_PrimaryUnitId');
            var $secUnitId = $('#ItemVm_SecondaryUnitId');
            var $unitFactor = $('#ItemVm_UnitFactor');
            var $sumAmount = $('#SumAmount');
            var $fpaRate = $('#ItemVm_FpaRate');
            var $primaryUnitCode = $('#primaryUnitCode');
            var $secondaryUnitCode = $('#secondaryUnitCode');
            var $fiscalPeriod = $('#ItemVm_FiscalPeriodId');
            var $series = $('#ItemVm_TransWarehouseDocSeriesId');
            var $transType = $('#ItemVm_TransactionType');
            //#endregion
            var calculateAmounts = () => {
                var q1Val = parseFloat($Q1.val());
                var fpaRate = parseFloat($fpaRate.val());
                var unitPrice = parseFloat($unitPrice.val());
                var amountDic = parseFloat($amountDic.val());
                var amountNet = q1Val * unitPrice;
                var amountFpa = (amountNet - amountDic) * fpaRate;

                $amountNet.val(amountNet);
                $amountFpa.val(amountFpa);

                $sumAmount.val(amountNet + amountFpa - amountDic);
            };
            var materialChanged = () => {
                var $spinner = $('#matLoading');
                $spinner.attr('hidden', false);
                var materialId = $material.val();
                console.log("WarehouseItem change event ->" + materialId);

                var uri = '@Configuration.GetSection("WebApiSettings")["WebApiLocal"]';
                var finalUri = `${uri}/materials/materialdata?materialId=${materialId}`;
                fetch(finalUri)
                    .then(function(response) {
                        if (response.ok) {
                            return response.json();
                        } else {
                            return "";
                        }

                    })
                    .then(function(myJson) {
                        if (myJson) {
                            console.log(JSON.stringify(myJson));
                            var rate = parseFloat(myJson.fpaRate);
                            var lastPrice = parseFloat(myJson.lastPrice);
                            var fpaId = myJson.fpaId;

                            $primaryUnitCode.text(` ${myJson.mainUnitCode}`);
                            $secondaryUnitCode.text(` ${myJson.secUnitCode}`);
                            $fpaRate.val(rate);

                            $unitPrice.val(lastPrice);
                            $primUnitId.val(myJson.mainUnitId);
                            $secUnitId.val(myJson.secUnitId);
                            $unitFactor.val(myJson.factorSeq);
                        }
                        $spinner.attr('hidden', true);
                    })
                    .catch((error) => {
                            $spinner.attr('hidden', true);
                            console.log(error);
                        }
                    );

            };
            var seriesChanged = () => {
                var $spinner = $('#seriesLoading');
                $spinner.attr('hidden', false);
                var seriesId = $series.val();
                console.log("Series change event ->" + seriesId);

                var uri = '@Configuration.GetSection("WebApiSettings")["WebApiLocal"]';
                var finalUri = `${uri}/materials/WarehouseTransType?seriesId=${seriesId}`;
                fetch(finalUri)
                    .then(function(response) {
                        if (response.ok) {
                            return response.json();
                        } else {
                            return "";
                        }

                    })
                    .then(function(myJson) {
                        if (myJson) {
                            console.log(JSON.stringify(myJson));
                            var type = myJson.transType;
                           
                            $transType.val(type);
                        }
                        $spinner.attr('hidden', true);
                    })
                    .catch((error) => {
                            $spinner.attr('hidden', true);
                            console.log(error);
                        }
                    );

            };
            var transactionDateChanged = () => {
                console.log("Inside transDate Changed");

                var forDate = $transDate.val();
                var uri = '@Configuration.GetSection("WebApiSettings")["WebApiLocal"]';
                var finalUri = `${uri}/materials/FiscalPeriod?forDate=${forDate}`;
                fetch(finalUri)
                    .then(function(response) {
                        if (response.ok) {
                            return response.json();
                        } else {
                            return "-1";
                        }

                    })
                    .then(function(myJson) {
                        console.log("Inside fetch then with myJson" + JSON.stringify(myJson));
                        if (myJson) {

                            var fiscalPeriodId = myJson.periodId;
                            console.log("Returned PeriodId=" + fiscalPeriodId);
                            $fiscalPeriod.val(fiscalPeriodId);
                        }
                        // $spinner.attr('hidden', true);
                    })
                    .catch((error) => {
                            // $spinner.attr('hidden', true);
                            console.log(error);
                        }
                    );
            };


            $transDate.change(() => {
                transactionDateChanged();
            });
            $Q1.change(() => {
                var factor = parseFloat($unitFactor.val());
                var q1Val = parseFloat($Q1.val());
                if (factor === 0) {
                    return;
                }
                $Q2.val((q1Val / factor).toFixed(2));
                calculateAmounts();
            });

            $Q2.change(() => {
                var factor = parseFloat($unitFactor.val());
                var q2Val = parseFloat($Q2.val());
                if (factor === 0) {
                    return;
                }
                $Q1.val(q2Val * factor);
                calculateAmounts();
            });
            $fpaRate.change(() => {
                calculateAmounts();
            });
            $amountDic.change(() => {
                calculateAmounts();
            });
            $unitPrice.change(() => {
                calculateAmounts();
            });
            $material.change(() => {
                materialChanged();
            });
           
            //#region Initial values
            if ($initialLoad.val() == 'True') {
                $('#matLoading').attr('hidden', true);
                $transDate.val(new Date().toISOString().slice(0, 10));
                transactionDateChanged();
                $amountNet.attr('data-actualValue', '0');
                $amountNet.val(0);
                $amountFpa.attr('data-actualValue', '0');
                $amountFpa.val(0);
                $amountDic.attr('data-actualValue', '0');
                $amountDic.val(0);
                $sumAmount.attr('data-actualValue', '0');
                $sumAmount.val(0);
                if ($material.val()) {
                    materialChanged();
                }
                if ($series.val()) {
                    seriesChanged();
                }
            }
            //#endregion
            
           
            $initialLoad.val(false);

        });
    </script>
}
