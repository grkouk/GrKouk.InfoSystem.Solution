// <auto-generated />
using System;
using GrKouk.WebApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GrKouk.WebApi.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    partial class ApiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-preview3-35497")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.BuyDocSeriesDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbr")
                        .HasMaxLength(20);

                    b.Property<bool>("Active");

                    b.Property<int>("BuyDocTypeDefId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<int>("CompanyId");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("BuyDocTypeDefId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CompanyId");

                    b.ToTable("BuyDocSeriesDefs");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.BuyDocTypeDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbr")
                        .HasMaxLength(20);

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<int>("CompanyId");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<int?>("TransTransactorDefId");

                    b.Property<int?>("TransWarehouseDefId");

                    b.Property<int>("UsedPrice");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CompanyId");

                    b.HasIndex("TransTransactorDefId");

                    b.HasIndex("TransWarehouseDefId");

                    b.ToTable("BuyDocTypeDefs");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.FinancialMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action");

                    b.Property<string>("Code")
                        .HasMaxLength(15);

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("FinancialMovements");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.FpaDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<float>("Rate");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("FpaKategories");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.SellDocSeriesDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbr")
                        .HasMaxLength(20);

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<int>("CompanyId");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<int>("SellDocTypeDefId");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CompanyId");

                    b.HasIndex("SellDocTypeDefId");

                    b.ToTable("SellDocSeriesDefs");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.SellDocTypeDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbr")
                        .HasMaxLength(20);

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<int>("CompanyId");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<int?>("TransTransactorDefId");

                    b.Property<int?>("TransWarehouseDefId");

                    b.Property<int>("UsedPrice");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CompanyId");

                    b.HasIndex("TransTransactorDefId");

                    b.HasIndex("TransWarehouseDefId");

                    b.ToTable("SellDocTypeDefs");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.TransExpenseDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<int>("CompanyId");

                    b.Property<int?>("DefaultDocSeriesId");

                    b.Property<int>("InventoryAction");

                    b.Property<int>("InventoryValueAction");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("CompanyId");

                    b.ToTable("TransExpenseDefs");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.TransTransactorDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .HasMaxLength(15);

                    b.Property<int>("CompanyId");

                    b.Property<int>("DefaultDocSeriesId");

                    b.Property<int>("FinancialTransAction");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<int>("TurnOverTransId");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TurnOverTransId");

                    b.ToTable("TransTransactorDefs");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.TransTransactorDocSeriesDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .HasMaxLength(15);

                    b.Property<int>("CompanyId");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<int>("TransTransactorDocTypeDefId");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TransTransactorDocTypeDefId");

                    b.ToTable("TransTransactorDocSeriesDefs");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.TransTransactorDocTypeDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .HasMaxLength(15);

                    b.Property<int>("CompanyId");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<int?>("TransTransactorDefId");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TransTransactorDefId");

                    b.ToTable("TransTransactorDocTypeDefs");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.TransWarehouseDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .HasMaxLength(15);

                    b.Property<int>("CompanyId");

                    b.Property<int>("DefaultDocSeriesId");

                    b.Property<int>("ExpenseInventoryAction");

                    b.Property<int>("ExpenseInventoryValueAction");

                    b.Property<int>("FixedAssetInventoryAction");

                    b.Property<int>("FixedAssetInventoryValueAction");

                    b.Property<int>("IncomeInventoryAction");

                    b.Property<int>("IncomeInventoryValueAction");

                    b.Property<int>("MaterialInventoryAction");

                    b.Property<int>("MaterialInventoryValueAction");

                    b.Property<int>("MaterialInvoicedValueAction");

                    b.Property<int>("MaterialInvoicedVolumeAction");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<int>("ServiceInventoryAction");

                    b.Property<int>("ServiceInventoryValueAction");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("CompanyId");

                    b.ToTable("TransWarehouseDefs");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.TransWarehouseDocSeriesDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .HasMaxLength(15);

                    b.Property<int>("CompanyId");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<int>("TransWarehouseDocTypeDefId");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TransWarehouseDocTypeDefId");

                    b.ToTable("TransWarehouseDocSeriesDefs");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.TransWarehouseDocTypeDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .HasMaxLength(15);

                    b.Property<int>("CompanyId");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<int?>("TransWarehouseDefId");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TransWarehouseDefId");

                    b.ToTable("TransWarehouseDocTypeDefs");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.BuyDocLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountDiscount");

                    b.Property<decimal>("AmountFpa");

                    b.Property<decimal>("AmountNet");

                    b.Property<int>("BuyDocumentId");

                    b.Property<int?>("BuyDocumentId1");

                    b.Property<decimal>("DiscountRate");

                    b.Property<string>("Etiology")
                        .HasMaxLength(500);

                    b.Property<float>("Factor");

                    b.Property<decimal>("FpaRate");

                    b.Property<int>("PrimaryUnitId");

                    b.Property<double>("Quontity1");

                    b.Property<double>("Quontity2");

                    b.Property<int>("SecondaryUnitId");

                    b.Property<decimal>("UnitPrice");

                    b.Property<int>("WarehouseItemId");

                    b.HasKey("Id");

                    b.HasIndex("BuyDocumentId");

                    b.HasIndex("BuyDocumentId1");

                    b.HasIndex("WarehouseItemId");

                    b.ToTable("BuyDocLines");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.BuyDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountDiscount");

                    b.Property<decimal>("AmountFpa");

                    b.Property<decimal>("AmountNet");

                    b.Property<int>("BuyDocSeriesId");

                    b.Property<int>("BuyDocTypeId");

                    b.Property<int>("CompanyId");

                    b.Property<string>("Etiology")
                        .HasMaxLength(500);

                    b.Property<int>("FiscalPeriodId");

                    b.Property<int>("SectionId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("TransDate");

                    b.Property<string>("TransRefCode");

                    b.Property<int>("TransactorId");

                    b.HasKey("Id");

                    b.HasIndex("BuyDocSeriesId");

                    b.HasIndex("BuyDocTypeId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FiscalPeriodId");

                    b.HasIndex("SectionId");

                    b.HasIndex("TransDate");

                    b.HasIndex("TransactorId");

                    b.ToTable("BuyDocuments");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.CostCentre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("CostCentres");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.DiaryDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("DiaryType");

                    b.Property<string>("Name");

                    b.Property<string>("SelectedDocTypes")
                        .HasMaxLength(200);

                    b.Property<string>("SelectedMatNatures")
                        .HasMaxLength(200);

                    b.Property<string>("SelectedTransTypes")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("DiaryDefs");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.FinDiaryTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountFpa")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountNet")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CompanyId");

                    b.Property<int>("CostCentreId");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<int>("FinTransCategoryId");

                    b.Property<int>("Kind");

                    b.Property<string>("ReferenceCode")
                        .HasMaxLength(50);

                    b.Property<int>("RevenueCentreId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("TransactionDate");

                    b.Property<int>("TransactorId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CostCentreId");

                    b.HasIndex("FinTransCategoryId");

                    b.HasIndex("RevenueCentreId");

                    b.HasIndex("TransactionDate");

                    b.HasIndex("TransactorId");

                    b.ToTable("FinDiaryTransactions");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.FinTransCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("FinTransCategories");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.FiscalPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(15);

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("FiscalPeriods");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.MaterialCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("MaterialCategories");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.MeasureUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<int?>("DecimalPlaces");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("MeasureUnits");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.RevenueCentre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("RevenueCentres");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.SellDocLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountDiscount");

                    b.Property<decimal>("AmountFpa");

                    b.Property<decimal>("AmountNet");

                    b.Property<decimal>("DiscountRate");

                    b.Property<string>("Etiology")
                        .HasMaxLength(500);

                    b.Property<float>("Factor");

                    b.Property<decimal>("FpaRate");

                    b.Property<int>("PrimaryUnitId");

                    b.Property<double>("Quontity1");

                    b.Property<double>("Quontity2");

                    b.Property<int>("SecondaryUnitId");

                    b.Property<int>("SellDocumentId");

                    b.Property<decimal>("UnitPrice");

                    b.Property<int>("WarehouseItemId");

                    b.HasKey("Id");

                    b.HasIndex("SellDocumentId");

                    b.HasIndex("WarehouseItemId");

                    b.ToTable("SellDocLines");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.SellDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountDiscount");

                    b.Property<decimal>("AmountFpa");

                    b.Property<decimal>("AmountNet");

                    b.Property<int>("CompanyId");

                    b.Property<string>("Etiology")
                        .HasMaxLength(500);

                    b.Property<int>("FiscalPeriodId");

                    b.Property<int>("SectionId");

                    b.Property<int>("SellDocSeriesId");

                    b.Property<int>("SellDocTypeId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("TransDate");

                    b.Property<string>("TransRefCode");

                    b.Property<int>("TransactorId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FiscalPeriodId");

                    b.HasIndex("SectionId");

                    b.HasIndex("SellDocSeriesId");

                    b.HasIndex("SellDocTypeId");

                    b.HasIndex("TransDate");

                    b.HasIndex("TransactorId");

                    b.ToTable("SellDocuments");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.Transactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<string>("Code")
                        .HasMaxLength(15);

                    b.Property<string>("EMail")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<string>("PhoneFax")
                        .HasMaxLength(200);

                    b.Property<string>("PhoneMobile")
                        .HasMaxLength(200);

                    b.Property<string>("PhoneWork")
                        .HasMaxLength(200);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TransactorTypeId");

                    b.Property<int?>("Zip");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("TransactorTypeId");

                    b.ToTable("Transactors");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.TransactorTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountDiscount");

                    b.Property<decimal>("AmountFpa");

                    b.Property<decimal>("AmountNet");

                    b.Property<int>("CompanyId");

                    b.Property<int>("CreatorId");

                    b.Property<decimal>("DiscountRate");

                    b.Property<string>("Etiology")
                        .HasMaxLength(500);

                    b.Property<int>("FinancialAction");

                    b.Property<int>("FiscalPeriodId");

                    b.Property<decimal>("FpaRate");

                    b.Property<int>("SectionId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("TransDate");

                    b.Property<decimal>("TransDiscountAmount");

                    b.Property<decimal>("TransFpaAmount");

                    b.Property<decimal>("TransNetAmount");

                    b.Property<string>("TransRefCode");

                    b.Property<int>("TransTransactorDocSeriesId");

                    b.Property<int>("TransTransactorDocTypeId");

                    b.Property<int>("TransactorId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("FiscalPeriodId");

                    b.HasIndex("SectionId");

                    b.HasIndex("TransDate");

                    b.HasIndex("TransTransactorDocSeriesId");

                    b.HasIndex("TransTransactorDocTypeId");

                    b.HasIndex("TransactorId");

                    b.ToTable("TransactorTransactions");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.TransactorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<bool>("IsSystem");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("TransactorTypes");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.WarehouseItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("BarCode")
                        .HasMaxLength(50);

                    b.Property<int>("BuyMeasureUnitId");

                    b.Property<double>("BuyUnitToMainRate");

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<int>("CompanyId");

                    b.Property<string>("Description");

                    b.Property<int>("FpaDefId");

                    b.Property<int>("MainMeasureUnitId");

                    b.Property<string>("ManufacturerCode")
                        .HasMaxLength(50);

                    b.Property<int>("MaterialCategoryId");

                    b.Property<int>("MaterialType");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<decimal>("PriceBrutto");

                    b.Property<decimal>("PriceNetto");

                    b.Property<int>("SecondaryMeasureUnitId");

                    b.Property<double>("SecondaryUnitToMainRate");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(500);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("WarehouseItemNature");

                    b.HasKey("Id");

                    b.HasIndex("BuyMeasureUnitId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FpaDefId");

                    b.HasIndex("MainMeasureUnitId");

                    b.HasIndex("MaterialCategoryId");

                    b.HasIndex("SecondaryMeasureUnitId");

                    b.ToTable("WarehouseItems");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.WarehouseItemCode", b =>
                {
                    b.Property<int>("CodeType");

                    b.Property<int>("WarehouseItemId");

                    b.Property<string>("Code")
                        .HasMaxLength(30);

                    b.Property<int>("CodeUsedUnit");

                    b.Property<int>("TransactorId");

                    b.HasKey("CodeType", "WarehouseItemId", "Code");

                    b.HasIndex("Code");

                    b.HasIndex("WarehouseItemId");

                    b.ToTable("WarehouseItemsCodes");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.WarehouseTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountDiscount");

                    b.Property<decimal>("AmountFpa");

                    b.Property<decimal>("AmountNet");

                    b.Property<int>("CompanyId");

                    b.Property<int>("CreatorId");

                    b.Property<decimal>("DiscountRate");

                    b.Property<string>("Etiology")
                        .HasMaxLength(500);

                    b.Property<int>("FiscalPeriodId");

                    b.Property<decimal>("FpaRate");

                    b.Property<int>("InventoryAction");

                    b.Property<int>("InventoryValueAction");

                    b.Property<int>("InvoicedValueAction");

                    b.Property<int>("InvoicedVolumeAction");

                    b.Property<int>("PrimaryUnitId");

                    b.Property<double>("Quontity1");

                    b.Property<double>("Quontity2");

                    b.Property<int>("SecondaryUnitId");

                    b.Property<int>("SectionId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("TransDate");

                    b.Property<decimal>("TransDiscountAmount");

                    b.Property<decimal>("TransFpaAmount");

                    b.Property<decimal>("TransNetAmount");

                    b.Property<decimal>("TransQ1");

                    b.Property<decimal>("TransQ2");

                    b.Property<string>("TransRefCode");

                    b.Property<int>("TransWarehouseDocSeriesId");

                    b.Property<int>("TransWarehouseDocTypeId");

                    b.Property<int>("TransactionType");

                    b.Property<decimal>("UnitFactor");

                    b.Property<decimal>("UnitPrice");

                    b.Property<int>("WarehouseItemId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("FiscalPeriodId");

                    b.HasIndex("SectionId");

                    b.HasIndex("TransDate");

                    b.HasIndex("TransWarehouseDocSeriesId");

                    b.HasIndex("TransWarehouseDocTypeId");

                    b.HasIndex("WarehouseItemId");

                    b.ToTable("WarehouseTransactions");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.BuyDocSeriesDef", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.BuyDocTypeDef", "BuyDocTypeDef")
                        .WithMany()
                        .HasForeignKey("BuyDocTypeDefId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.BuyDocTypeDef", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.TransTransactorDef", "TransTransactorDef")
                        .WithMany()
                        .HasForeignKey("TransTransactorDefId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.TransWarehouseDef", "TransWarehouseDef")
                        .WithMany()
                        .HasForeignKey("TransWarehouseDefId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.SellDocSeriesDef", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.SellDocTypeDef", "SellDocTypeDef")
                        .WithMany()
                        .HasForeignKey("SellDocTypeDefId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.SellDocTypeDef", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.TransTransactorDef", "TransTransactorDef")
                        .WithMany()
                        .HasForeignKey("TransTransactorDefId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.TransWarehouseDef", "TransWarehouseDef")
                        .WithMany()
                        .HasForeignKey("TransWarehouseDefId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.TransExpenseDef", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.TransTransactorDef", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.FinancialMovement", "TurnOverTrans")
                        .WithMany()
                        .HasForeignKey("TurnOverTransId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.TransTransactorDocSeriesDef", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.TransTransactorDocTypeDef", "TransTransactorDocTypeDef")
                        .WithMany()
                        .HasForeignKey("TransTransactorDocTypeDefId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.TransTransactorDocTypeDef", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.TransTransactorDef", "TransTransactorDef")
                        .WithMany()
                        .HasForeignKey("TransTransactorDefId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.TransWarehouseDef", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.TransWarehouseDocSeriesDef", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.TransWarehouseDocTypeDef", "TransWarehouseDocTypeDef")
                        .WithMany()
                        .HasForeignKey("TransWarehouseDocTypeDefId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.TransWarehouseDocTypeDef", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.TransWarehouseDef", "TransWarehouseDef")
                        .WithMany()
                        .HasForeignKey("TransWarehouseDefId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.BuyDocLine", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.BuyDocument", "BuyDocument")
                        .WithMany()
                        .HasForeignKey("BuyDocumentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.BuyDocument")
                        .WithMany("BuyDocLines")
                        .HasForeignKey("BuyDocumentId1");

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.WarehouseItem", "WarehouseItem")
                        .WithMany()
                        .HasForeignKey("WarehouseItemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.BuyDocument", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.BuyDocSeriesDef", "BuyDocSeries")
                        .WithMany()
                        .HasForeignKey("BuyDocSeriesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.BuyDocTypeDef", "BuyDocType")
                        .WithMany()
                        .HasForeignKey("BuyDocTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.FiscalPeriod", "FiscalPeriod")
                        .WithMany()
                        .HasForeignKey("FiscalPeriodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Transactor", "Transactor")
                        .WithMany()
                        .HasForeignKey("TransactorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.FinDiaryTransaction", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.CostCentre", "CostCentre")
                        .WithMany()
                        .HasForeignKey("CostCentreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.FinTransCategory", "FinTransCategory")
                        .WithMany()
                        .HasForeignKey("FinTransCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.RevenueCentre", "RevenueCentre")
                        .WithMany()
                        .HasForeignKey("RevenueCentreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Transactor", "Transactor")
                        .WithMany()
                        .HasForeignKey("TransactorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.SellDocLine", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.SellDocument", "SellDocument")
                        .WithMany("SellDocLines")
                        .HasForeignKey("SellDocumentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.WarehouseItem", "WarehouseItem")
                        .WithMany()
                        .HasForeignKey("WarehouseItemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.SellDocument", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.FiscalPeriod", "FiscalPeriod")
                        .WithMany()
                        .HasForeignKey("FiscalPeriodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.SellDocSeriesDef", "SellDocSeries")
                        .WithMany()
                        .HasForeignKey("SellDocSeriesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.SellDocTypeDef", "SellDocType")
                        .WithMany()
                        .HasForeignKey("SellDocTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Transactor", "Transactor")
                        .WithMany()
                        .HasForeignKey("TransactorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.Transactor", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.TransactorType", "TransactorType")
                        .WithMany()
                        .HasForeignKey("TransactorTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.TransactorTransaction", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.FiscalPeriod", "FiscalPeriod")
                        .WithMany()
                        .HasForeignKey("FiscalPeriodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.TransTransactorDocSeriesDef", "TransTransactorDocSeries")
                        .WithMany()
                        .HasForeignKey("TransTransactorDocSeriesId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.TransTransactorDocTypeDef", "TransTransactorDocType")
                        .WithMany()
                        .HasForeignKey("TransTransactorDocTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Transactor", "Transactor")
                        .WithMany()
                        .HasForeignKey("TransactorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.WarehouseItem", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.MeasureUnit", "BuyMeasureUnit")
                        .WithMany()
                        .HasForeignKey("BuyMeasureUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.FpaDef", "FpaDef")
                        .WithMany()
                        .HasForeignKey("FpaDefId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.MeasureUnit", "MainMeasureUnit")
                        .WithMany()
                        .HasForeignKey("MainMeasureUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.MaterialCategory", "MaterialCaterory")
                        .WithMany()
                        .HasForeignKey("MaterialCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.MeasureUnit", "SecondaryMeasureUnit")
                        .WithMany()
                        .HasForeignKey("SecondaryMeasureUnitId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.WarehouseItemCode", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.WarehouseItem", "WarehouseItem")
                        .WithMany()
                        .HasForeignKey("WarehouseItemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.WarehouseTransaction", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.FiscalPeriod", "FiscalPeriod")
                        .WithMany()
                        .HasForeignKey("FiscalPeriodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.TransWarehouseDocSeriesDef", "TransWarehouseDocSeries")
                        .WithMany()
                        .HasForeignKey("TransWarehouseDocSeriesId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.TransWarehouseDocTypeDef", "TransWarehouseDocType")
                        .WithMany()
                        .HasForeignKey("TransWarehouseDocTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.WarehouseItem", "WarehouseItem")
                        .WithMany()
                        .HasForeignKey("WarehouseItemId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
