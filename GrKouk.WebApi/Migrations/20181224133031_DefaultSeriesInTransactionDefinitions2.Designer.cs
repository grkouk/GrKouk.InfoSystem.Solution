// <auto-generated />
using System;
using GrKouk.WebApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GrKouk.WebApi.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20181224133031_DefaultSeriesInTransactionDefinitions2")]
    partial class DefaultSeriesInTransactionDefinitions2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.0-preview3-35497")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.BuyMaterialDocSeriesDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbr")
                        .HasMaxLength(20);

                    b.Property<bool>("Active");

                    b.Property<int>("BuyMaterialDocTypeDefId");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<int>("CompanyId");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("BuyMaterialDocTypeDefId");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CompanyId");

                    b.ToTable("BuyMaterialDocSeriesDefs");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.BuyMaterialDocTypeDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Abbr")
                        .HasMaxLength(20);

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<int>("CompanyId");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<int?>("TransSupplierDefId");

                    b.Property<int?>("TransWarehouseDefId");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CompanyId");

                    b.HasIndex("TransSupplierDefId");

                    b.HasIndex("TransWarehouseDefId");

                    b.ToTable("BuyMaterialDocTypeDefs");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.FinancialMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Action");

                    b.Property<string>("Code")
                        .HasMaxLength(15);

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("FinancialMovements");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.FpaDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<float>("Rate");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("FpaKategories");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.TransCustomerDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .HasMaxLength(15);

                    b.Property<int>("CompanyId");

                    b.Property<int>("CreditTransId");

                    b.Property<int>("DebitTransId");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<int?>("TransCustomerDefaultDocSeriesId");

                    b.Property<int>("TurnOverTransId");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreditTransId");

                    b.HasIndex("DebitTransId");

                    b.HasIndex("TurnOverTransId");

                    b.ToTable("TransCustomerDefs");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.TransCustomerDocSeriesDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .HasMaxLength(15);

                    b.Property<int>("CompanyId");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<int>("TransCustomerDocTypeDefId");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TransCustomerDocTypeDefId");

                    b.ToTable("TransCustomerDocSeriesDefs");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.TransCustomerDocTypeDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .HasMaxLength(15);

                    b.Property<int>("CompanyId");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<int?>("TransCustomerDefId");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TransCustomerDefId");

                    b.ToTable("TransCustomerDocTypeDefs");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.TransSupplierDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .HasMaxLength(15);

                    b.Property<int>("CompanyId");

                    b.Property<int>("CreditTransId");

                    b.Property<int>("DebitTransId");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<int?>("TransSupplierDefaultDocSeriesId");

                    b.Property<int>("TurnOverTransId");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreditTransId");

                    b.HasIndex("DebitTransId");

                    b.HasIndex("TurnOverTransId");

                    b.ToTable("TransSupplierDefs");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.TransSupplierDocSeriesDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .HasMaxLength(15);

                    b.Property<int>("CompanyId");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<int>("TransSupplierDocTypeDefId");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TransSupplierDocTypeDefId");

                    b.ToTable("TransSupplierDocSeriesDefs");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.TransSupplierDocTypeDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .HasMaxLength(15);

                    b.Property<int>("CompanyId");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<int?>("TransSupplierDefId");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TransSupplierDefId");

                    b.ToTable("TransSupplierDocTypeDefs");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.TransWarehouseDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<int>("AmtBuyTransId");

                    b.Property<int>("AmtExportsTransId");

                    b.Property<int>("AmtImportsTransId");

                    b.Property<int>("AmtInvoicedExportsTransId");

                    b.Property<int>("AmtInvoicedImportsTransId");

                    b.Property<int>("AmtSellTransId");

                    b.Property<string>("Code")
                        .HasMaxLength(15);

                    b.Property<int>("CompanyId");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<int>("TransWarehouseDefaultDocSeriesDefId");

                    b.Property<int>("VolBuyTransId");

                    b.Property<int>("VolExportsTransId");

                    b.Property<int>("VolImportsTransId");

                    b.Property<int>("VolInvoicedExportsTransId");

                    b.Property<int>("VolInvoicedImportsTransId");

                    b.Property<int>("VolSellTransId");

                    b.HasKey("Id");

                    b.HasIndex("AmtBuyTransId");

                    b.HasIndex("AmtExportsTransId");

                    b.HasIndex("AmtImportsTransId");

                    b.HasIndex("AmtInvoicedExportsTransId");

                    b.HasIndex("AmtInvoicedImportsTransId");

                    b.HasIndex("AmtSellTransId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("CompanyId");

                    b.HasIndex("VolBuyTransId");

                    b.HasIndex("VolExportsTransId");

                    b.HasIndex("VolImportsTransId");

                    b.HasIndex("VolInvoicedExportsTransId");

                    b.HasIndex("VolInvoicedImportsTransId");

                    b.HasIndex("VolSellTransId");

                    b.ToTable("TransWarehouseDefs");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.TransWarehouseDocSeriesDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .HasMaxLength(15);

                    b.Property<int>("CompanyId");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<int>("TransWarehouseDocTypeDefId");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TransWarehouseDocTypeDefId");

                    b.ToTable("TransWarehouseDocSeriesDefs");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.TransWarehouseDocTypeDef", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .HasMaxLength(15);

                    b.Property<int>("CompanyId");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<int?>("TransWarehouseDefId");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("CompanyId");

                    b.HasIndex("TransWarehouseDefId");

                    b.ToTable("TransWarehouseDocTypeDefs");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.BuyMaterialsDocLine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountFpa");

                    b.Property<decimal>("AmountNet");

                    b.Property<int>("BuyDocumentId");

                    b.Property<int?>("BuyMaterialsDocumentId");

                    b.Property<float>("DiscountRate");

                    b.Property<string>("Etiology")
                        .HasMaxLength(500);

                    b.Property<int>("FpaId");

                    b.Property<float>("FpaRate");

                    b.Property<int>("MaterialId");

                    b.Property<int>("PrimaryUnitId");

                    b.Property<double>("Quontity1");

                    b.Property<double>("Quontity2");

                    b.Property<int>("SecondaryUnitId");

                    b.HasKey("Id");

                    b.HasIndex("BuyDocumentId");

                    b.HasIndex("BuyMaterialsDocumentId");

                    b.HasIndex("MaterialId");

                    b.ToTable("BuyMaterialsDocLines");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.BuyMaterialsDocument", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountDiscount");

                    b.Property<decimal>("AmountFpa");

                    b.Property<decimal>("AmountNet");

                    b.Property<int>("CompanyId");

                    b.Property<string>("Etiology")
                        .HasMaxLength(500);

                    b.Property<int>("FiscalPeriodId");

                    b.Property<int>("MaterialDocSeriesId");

                    b.Property<int>("MaterialDocTypeId");

                    b.Property<int>("SectionId");

                    b.Property<int>("SupplierId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("TransDate");

                    b.Property<string>("TransRefCode");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FiscalPeriodId");

                    b.HasIndex("MaterialDocSeriesId");

                    b.HasIndex("MaterialDocTypeId");

                    b.HasIndex("SectionId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TransDate");

                    b.ToTable("BuyMaterialsDocuments");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.CostCentre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("CostCentres");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.CustomerTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountDiscount");

                    b.Property<decimal>("AmountFpa");

                    b.Property<decimal>("AmountNet");

                    b.Property<int>("CompanyId");

                    b.Property<int>("CreatorId");

                    b.Property<int>("CustomerId");

                    b.Property<string>("Etiology")
                        .HasMaxLength(500);

                    b.Property<int>("FiscalPeriodId");

                    b.Property<int>("FpaDefId");

                    b.Property<float>("FpaRate");

                    b.Property<int>("SectionId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TransCustomerDocSeriesId");

                    b.Property<int>("TransCustomerDocTypeId");

                    b.Property<DateTime>("TransDate");

                    b.Property<string>("TransRefCode");

                    b.Property<int>("TransactionType");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("FiscalPeriodId");

                    b.HasIndex("FpaDefId");

                    b.HasIndex("SectionId");

                    b.HasIndex("TransCustomerDocSeriesId");

                    b.HasIndex("TransCustomerDocTypeId");

                    b.HasIndex("TransDate");

                    b.ToTable("CustomerTransactions");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.FinDiaryTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountFpa")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("AmountNet")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CompanyId");

                    b.Property<int>("CostCentreId");

                    b.Property<string>("Description")
                        .HasMaxLength(500);

                    b.Property<int>("FinTransCategoryId");

                    b.Property<int>("Kind");

                    b.Property<string>("ReferenceCode")
                        .HasMaxLength(50);

                    b.Property<int>("RevenueCentreId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("TransactionDate");

                    b.Property<int>("TransactorId");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CostCentreId");

                    b.HasIndex("FinTransCategoryId");

                    b.HasIndex("RevenueCentreId");

                    b.HasIndex("TransactionDate");

                    b.HasIndex("TransactorId");

                    b.ToTable("FinDiaryTransactions");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.FinTransCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.ToTable("FinTransCategories");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.FiscalPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .HasMaxLength(15);

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.ToTable("FiscalPeriods");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.Material", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("BarCode")
                        .HasMaxLength(50);

                    b.Property<int?>("BuyMeasureUnitId");

                    b.Property<double>("BuyUnitToMainRate");

                    b.Property<string>("Code")
                        .HasMaxLength(20);

                    b.Property<int>("CompanyId");

                    b.Property<string>("Description");

                    b.Property<int>("FpaDefId");

                    b.Property<int?>("MainMeasureUnitId");

                    b.Property<string>("ManufacturerCode")
                        .HasMaxLength(50);

                    b.Property<int>("MaterialCategoryId");

                    b.Property<int>("MaterialType");

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<int?>("SecondaryMeasureUnitId");

                    b.Property<double>("SecondaryUnitToMainRate");

                    b.Property<string>("ShortDescription")
                        .HasMaxLength(500);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.HasKey("Id");

                    b.HasIndex("BuyMeasureUnitId");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("CompanyId");

                    b.HasIndex("FpaDefId");

                    b.HasIndex("MainMeasureUnitId");

                    b.HasIndex("MaterialCategoryId");

                    b.HasIndex("SecondaryMeasureUnitId");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.MaterialCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("MaterialCategories");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.MeasureUnit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Active");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<int?>("DecimalPlaces");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("MeasureUnits");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.RevenueCentre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("RevenueCentres");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(25);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.Property<string>("SystemName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.SupplierTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountDiscount");

                    b.Property<decimal>("AmountFpa");

                    b.Property<decimal>("AmountNet");

                    b.Property<int>("CompanyId");

                    b.Property<int>("CreatorId");

                    b.Property<string>("Etiology")
                        .HasMaxLength(500);

                    b.Property<int>("FiscalPeriodId");

                    b.Property<int>("FpaDefId");

                    b.Property<float>("FpaRate");

                    b.Property<int>("SectionId");

                    b.Property<int>("SupplierId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("TransDate");

                    b.Property<string>("TransRefCode");

                    b.Property<int>("TransSupplierDocSeriesId");

                    b.Property<int>("TransSupplierDocTypeId");

                    b.Property<int>("TransactionType");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("FiscalPeriodId");

                    b.HasIndex("FpaDefId");

                    b.HasIndex("SectionId");

                    b.HasIndex("SupplierId");

                    b.HasIndex("TransDate");

                    b.HasIndex("TransSupplierDocSeriesId");

                    b.HasIndex("TransSupplierDocTypeId");

                    b.ToTable("SupplierTransactions");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.Transactor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .HasMaxLength(200);

                    b.Property<string>("City")
                        .HasMaxLength(50);

                    b.Property<string>("Code")
                        .HasMaxLength(15);

                    b.Property<string>("EMail")
                        .HasMaxLength(200);

                    b.Property<string>("Name")
                        .HasMaxLength(200);

                    b.Property<string>("PhoneFax")
                        .HasMaxLength(200);

                    b.Property<string>("PhoneMobile")
                        .HasMaxLength(200);

                    b.Property<string>("PhoneWork")
                        .HasMaxLength(200);

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("TransactorTypeId");

                    b.Property<int?>("Zip");

                    b.HasKey("Id");

                    b.HasIndex("Code");

                    b.HasIndex("TransactorTypeId");

                    b.ToTable("Transactors");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.TransactorType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.Property<bool>("IsSystem");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200);

                    b.HasKey("Id");

                    b.ToTable("TransactorTypes");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.WarehouseTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("AmountDiscount");

                    b.Property<decimal>("AmountFpa");

                    b.Property<decimal>("AmountNet");

                    b.Property<int>("CompanyId");

                    b.Property<int>("CreatorId");

                    b.Property<string>("Etiology")
                        .HasMaxLength(500);

                    b.Property<int>("FiscalPeriodId");

                    b.Property<int?>("FpaDefId");

                    b.Property<int>("FpaId");

                    b.Property<float>("FpaRate");

                    b.Property<int>("MaterialId");

                    b.Property<int>("PrimaryUnitId");

                    b.Property<double>("Quontity1");

                    b.Property<double>("Quontity2");

                    b.Property<int>("SecondaryUnitId");

                    b.Property<int>("SectionId");

                    b.Property<byte[]>("Timestamp")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<DateTime>("TransDate");

                    b.Property<string>("TransRefCode");

                    b.Property<int>("TransWarehouseDocSeriesId");

                    b.Property<int>("TransWarehouseDocTypeId");

                    b.Property<int>("TransactionType");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatorId");

                    b.HasIndex("FiscalPeriodId");

                    b.HasIndex("FpaDefId");

                    b.HasIndex("MaterialId");

                    b.HasIndex("SectionId");

                    b.HasIndex("TransDate");

                    b.HasIndex("TransWarehouseDocSeriesId");

                    b.HasIndex("TransWarehouseDocTypeId");

                    b.ToTable("WarehouseTransactions");
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.BuyMaterialDocSeriesDef", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.BuyMaterialDocTypeDef", "BuyMaterialDocTypeDef")
                        .WithMany()
                        .HasForeignKey("BuyMaterialDocTypeDefId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.BuyMaterialDocTypeDef", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.TransSupplierDef", "TransSupplierDef")
                        .WithMany()
                        .HasForeignKey("TransSupplierDefId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.TransWarehouseDef", "TransWarehouseDef")
                        .WithMany()
                        .HasForeignKey("TransWarehouseDefId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.TransCustomerDef", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.FinancialMovement", "CreditTrans")
                        .WithMany()
                        .HasForeignKey("CreditTransId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.FinancialMovement", "DebitTrans")
                        .WithMany()
                        .HasForeignKey("DebitTransId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.FinancialMovement", "TurnOverTrans")
                        .WithMany()
                        .HasForeignKey("TurnOverTransId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.TransCustomerDocSeriesDef", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.TransCustomerDocTypeDef", "TransCustomerDocTypeDef")
                        .WithMany()
                        .HasForeignKey("TransCustomerDocTypeDefId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.TransCustomerDocTypeDef", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.TransCustomerDef", "TransCustomerDef")
                        .WithMany()
                        .HasForeignKey("TransCustomerDefId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.TransSupplierDef", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.FinancialMovement", "CreditTrans")
                        .WithMany()
                        .HasForeignKey("CreditTransId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.FinancialMovement", "DebitTrans")
                        .WithMany()
                        .HasForeignKey("DebitTransId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.FinancialMovement", "TurnOverTrans")
                        .WithMany()
                        .HasForeignKey("TurnOverTransId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.TransSupplierDocSeriesDef", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.TransSupplierDocTypeDef", "TransSupplierDocTypeDef")
                        .WithMany()
                        .HasForeignKey("TransSupplierDocTypeDefId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.TransSupplierDocTypeDef", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.TransSupplierDef", "TransSupplierDef")
                        .WithMany()
                        .HasForeignKey("TransSupplierDefId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.TransWarehouseDef", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.FinancialMovement", "AmtBuyTrans")
                        .WithMany()
                        .HasForeignKey("AmtBuyTransId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.FinancialMovement", "AmtExportsTrans")
                        .WithMany()
                        .HasForeignKey("AmtExportsTransId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.FinancialMovement", "AmtImportsTrans")
                        .WithMany()
                        .HasForeignKey("AmtImportsTransId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.FinancialMovement", "AmtInvoicedExportsTrans")
                        .WithMany()
                        .HasForeignKey("AmtInvoicedExportsTransId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.FinancialMovement", "AmtInvoicedImportsTrans")
                        .WithMany()
                        .HasForeignKey("AmtInvoicedImportsTransId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.FinancialMovement", "AmtSellTrans")
                        .WithMany()
                        .HasForeignKey("AmtSellTransId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.FinancialMovement", "VolBuyTrans")
                        .WithMany()
                        .HasForeignKey("VolBuyTransId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.FinancialMovement", "VolExportsTrans")
                        .WithMany()
                        .HasForeignKey("VolExportsTransId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.FinancialMovement", "VolImportsTrans")
                        .WithMany()
                        .HasForeignKey("VolImportsTransId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.FinancialMovement", "VolInvoicedExportsTrans")
                        .WithMany()
                        .HasForeignKey("VolInvoicedExportsTransId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.FinancialMovement", "VolInvoicedImportsTrans")
                        .WithMany()
                        .HasForeignKey("VolInvoicedImportsTransId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.FinancialMovement", "VolSellTrans")
                        .WithMany()
                        .HasForeignKey("VolSellTransId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.TransWarehouseDocSeriesDef", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.TransWarehouseDocTypeDef", "TransWarehouseDocTypeDef")
                        .WithMany()
                        .HasForeignKey("TransWarehouseDocTypeDefId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.FinConfig.TransWarehouseDocTypeDef", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.TransWarehouseDef", "TransWarehouseDef")
                        .WithMany()
                        .HasForeignKey("TransWarehouseDefId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.BuyMaterialsDocLine", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.BuyMaterialsDocument", "BuyDocument")
                        .WithMany()
                        .HasForeignKey("BuyDocumentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.BuyMaterialsDocument")
                        .WithMany("BuyDocLines")
                        .HasForeignKey("BuyMaterialsDocumentId");

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.BuyMaterialsDocument", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.FiscalPeriod", "FiscalPeriod")
                        .WithMany()
                        .HasForeignKey("FiscalPeriodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.BuyMaterialDocSeriesDef", "MaterialDocSeries")
                        .WithMany()
                        .HasForeignKey("MaterialDocSeriesId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.BuyMaterialDocTypeDef", "MaterialDocType")
                        .WithMany()
                        .HasForeignKey("MaterialDocTypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Transactor", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.CustomerTransaction", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Transactor", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.FiscalPeriod", "FiscalPeriod")
                        .WithMany()
                        .HasForeignKey("FiscalPeriodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.FpaDef", "FpaDef")
                        .WithMany()
                        .HasForeignKey("FpaDefId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.TransCustomerDocSeriesDef", "TransCustomerDocSeries")
                        .WithMany()
                        .HasForeignKey("TransCustomerDocSeriesId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.TransCustomerDocTypeDef", "TransCustomerDocType")
                        .WithMany()
                        .HasForeignKey("TransCustomerDocTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.FinDiaryTransaction", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.CostCentre", "CostCentre")
                        .WithMany()
                        .HasForeignKey("CostCentreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.FinTransCategory", "FinTransCategory")
                        .WithMany()
                        .HasForeignKey("FinTransCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.RevenueCentre", "RevenueCentre")
                        .WithMany()
                        .HasForeignKey("RevenueCentreId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Transactor", "Transactor")
                        .WithMany()
                        .HasForeignKey("TransactorId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.Material", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.MeasureUnit", "BuyMeasureUnit")
                        .WithMany()
                        .HasForeignKey("BuyMeasureUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.FpaDef", "FpaDef")
                        .WithMany()
                        .HasForeignKey("FpaDefId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.MeasureUnit", "MainMeasureUnit")
                        .WithMany()
                        .HasForeignKey("MainMeasureUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.MaterialCategory", "MaterialCaterory")
                        .WithMany()
                        .HasForeignKey("MaterialCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.MeasureUnit", "SecondaryMeasureUnit")
                        .WithMany()
                        .HasForeignKey("SecondaryMeasureUnitId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.SupplierTransaction", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.FiscalPeriod", "FiscalPeriod")
                        .WithMany()
                        .HasForeignKey("FiscalPeriodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.FpaDef", "FpaDef")
                        .WithMany()
                        .HasForeignKey("FpaDefId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Transactor", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.TransSupplierDocSeriesDef", "TransSupplierDocSeries")
                        .WithMany()
                        .HasForeignKey("TransSupplierDocSeriesId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.TransSupplierDocTypeDef", "TransSupplierDocType")
                        .WithMany()
                        .HasForeignKey("TransSupplierDocTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.Transactor", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.TransactorType", "TransactorType")
                        .WithMany()
                        .HasForeignKey("TransactorTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("GrKouk.InfoSystem.Domain.Shared.WarehouseTransaction", b =>
                {
                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.FiscalPeriod", "FiscalPeriod")
                        .WithMany()
                        .HasForeignKey("FiscalPeriodId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.FpaDef", "FpaDef")
                        .WithMany()
                        .HasForeignKey("FpaDefId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Material", "Material")
                        .WithMany()
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.Shared.Section", "Section")
                        .WithMany()
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.TransWarehouseDocSeriesDef", "TransWarehouseDocSeries")
                        .WithMany()
                        .HasForeignKey("TransWarehouseDocSeriesId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GrKouk.InfoSystem.Domain.FinConfig.TransWarehouseDocTypeDef", "TransWarehouseDocType")
                        .WithMany()
                        .HasForeignKey("TransWarehouseDocTypeId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
